let createAppAuth;_cf1‍.w("@octokit/auth-app",[["createAppAuth",["createAppAuth"],function(v){createAppAuth=v}]]);// githubAppHelper.js



// const { createAppAuth } = require('@octokit/auth-app');
const { Octokit } = require('@octokit/rest');
const fs = require('fs');
const jwt = require('jsonwebtoken');

// Load your GitHub App's private key
const privateKey = fs.readFileSync('C:\Users\saich\Downloads\kc7551.2024-05-15.private-key (1).pem', 'utf8');

// Your GitHub App's ID
const appId = '898875';

// Generate a JWT
const generateJWT = () => {
    const now = Math.floor(Date.now() / 1000);
    const payload = {
        iat: now, // Issued at time
        exp: now + 600, // JWT expiration time (10 minutes)
        iss: appId // GitHub App's ID
    };
    return jwt.sign(payload, privateKey, { algorithm: 'RS256' });
};

// Get Installation ID
const getInstallationId = async () => {
    const token = generateJWT();

    const octokit = new Octokit({
        authStrategy: createAppAuth,
        auth: {
            appId,
            privateKey,
        },
    });

    try {
        const { data: installations } = await octokit.request('GET /app/installations', {
            headers: {
                authorization: `Bearer ${token}`,
                accept: 'application/vnd.github.v3+json',
            },
        });

        // Assuming you need the first installation ID
        return installations[0].id;
    } catch (error) {
        _cf1‍.g.console.error('Error getting installation ID:', error);
    }
};

// Create Installation Access Token
const createInstallationAccessToken = async (installationId) => {
    const octokit = new Octokit({
        authStrategy: createAppAuth,
        auth: {
            appId,
            privateKey,
        },
    });

    try {
        const { data: tokenData } = await octokit.request('POST /app/installations/{installation_id}/access_tokens', {
            installation_id: installationId,
        });

        return tokenData.token;
    } catch (error) {
        _cf1‍.g.console.error('Error creating installation access token:', error);
    }
};

module.exports = { getInstallationId, createInstallationAccessToken };
